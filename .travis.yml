if: branch =~ ^master$|^development$|^release|^uat
language: bash
group: stable
dist: trusty
os: linux
sudo: required
services:
- docker

before_install: |-
  if [ "master" == "${TRAVIS_BRANCH}" ]; then
    for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
      eval export ${env_value%_PRODUCTION}="${!env_value}"
    done
  elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
    for env_value in $(compgen -v |grep '.*_STAGING$'); do
      eval export ${env_value%_STAGING}="${!env_value}"
    done
  elif [[ "${TRAVIS_BRANCH}" == uat*  ]]; then
    for env_value in $(compgen -v |grep '.*_UAT$'); do
      eval export ${env_value%_UAT}="${!env_value}"
    done
  else
    for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
      eval export ${env_value%_DEVELOPMENT}="${!env_value}"
    done
  fi
install:
  - pip install awscli --upgrade --user

script:
  - echo "skip"

before_deploy: |-
    set -e

    # ECR login
    export ECR_LOGIN="aws ecr get-login --registry-ids ${AWS_REGISTRY_ID} --region ${AWS_REGION} --no-include-email"

    # Generate image tags
    tag_build_num="0.0.${TRAVIS_BUILD_NUMBER}"
    export IMAGE_BUILD_NUM="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:$tag_build_num"
    export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:latest"

    ## build test image
    #docker build \
    #-t test \
    #--target installer \
    #.
    #
    ## unit test
    #docker run -ti --rm \
    #test \
    #bash -c "phpunit"

    # Build docker image
    docker build \
    --build-arg GITHUB_TOKEN=$GITHUB_TOKEN \
    -t ${IMAGE_BUILD_NUM} \
    -t ${IMAGE_LATEST} \
    .

deploy:
- provider: script
  script:  >-
    $(AWS_ACCESS_KEY_ID=${AWS_ECR_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_ECR_SECRET_ACCESS_KEY} ${ECR_LOGIN})
    && docker push ${IMAGE_BUILD_NUM}
    && docker push ${IMAGE_LATEST}
  skip_cleanup: true
  on:
    all_branches: true
